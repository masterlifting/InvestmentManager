@*@page "/stocktransactions"
@inject CustomHttpClient httpClient
@inject Notification notice

@if (models != null)
{
    foreach (var model in models)
    {
        string profit = model.CurrencyId == 1 ? model.ProfitCurrent.ToString("C", new CultureInfo("en-US")) : model.ProfitCurrent.ToString("C");
        Choice.Color lotColor = model.FreeLot == 0 ? Choice.Color.success : Choice.Color.light;
        Choice.Color profitColor = model.ProfitCurrent > 0 ? Choice.Color.success : Choice.Color.danger;

        <div class="container idark iframe small">
            <RowTitle Text="@model.CompanyName" Color="Choice.Color.warning" />
            @if (_companyId == model.CompanyId)
            {
                <StockTransactionDetail CloseDetail="@CloseDetail" CompanyId="@model.CompanyId" />
            }
            else
            {
                <DetailIcon DetailAction="GetDetail" Value="@model.CompanyId.ToString()" />
                <div class="row icontent">
                    <div class="col">
                        <RowSingleInfo Title="Последняя операция:" Value="@model.DateLastTransaction.ToShortDateString()" />
                        <RowSingleInfo Title="Свободных лотов:" Value="@model.FreeLot.ToString()" Color="@lotColor" />
                        <RowSingleInfo Title="Текущий профит:" Value="@profit" Color="@profitColor" />
                    </div>
                </div>
            }


            @if (model.ProfitCurrent < 0 && model.FreeLot > 0)
            {
                string price = model.CurrencyId == 1
                    ? ((decimal)Math.Abs(model.ProfitCurrent) / model.FreeLot).ToString("C", new CultureInfo("en-US"))
                    : ((decimal)Math.Abs(model.ProfitCurrent) / model.FreeLot).ToString("C");
                <div class="row icard-content">
                    <div class="col">
                        <RowSingleInfo Title="Взвешенная цена:" Value="@price" Color="Choice.Color.info" />
                    </div>
                </div>
            }
        </div>
    }
    notice.LoadStop();
}

@code {
    long _companyId = 0;
    IEnumerable<StockTransactionModel> models;
    protected override async Task OnInitializedAsync()
    {
        notice.LoadStart();
        models = await httpClient.GetResultAsync<IEnumerable<StockTransactionModel>>("transaction/getstocktransactions");
    }
    void GetDetail(string companyId) => _companyId = long.Parse(companyId);
    void CloseDetail() => _companyId = 0;
}*@
