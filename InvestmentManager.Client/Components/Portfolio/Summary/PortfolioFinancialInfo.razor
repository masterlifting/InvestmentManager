@inject HttpClient httpClient

<RowTitleSub Text="Финансовые показатели" />

<RowInfo Title="Общая стоимость в рублях" Value="@result.SummaryR" RowCount="Choices.RowCount.Two" />
<RowInfo Title="Чистые инвестиции" Value="@result.CleanInvestSum" RowCount="Choices.RowCount.Two" />
<RowInfo Title="Общая стоимость" Value="@result.Summary" RowCount="Choices.RowCount.Two" />
<RowInfo Title="Оборотная стоимость" Value="@result.CirculationSum" RowCount="Choices.RowCount.Two" />
<RowInfo Title="Cвободный остаток" Value="@result.FreeSum" Color="Choices.Color.success" RowCount="Choices.RowCount.Two" />
<RowInfo Title="Прибыльность" Value="@result.PercentProfit" />
<RowInfo Title="Дивидендов" Value="@result.Dividends" Color="Choices.Color.success" />
<RowInfo Title="Комиссий" Value="@result.Comissions" Color="Choices.Color.danger" />
<RowInfo Title="Курс купленных $" Value="@result.AvgDollarBuy" />
<RowInfo Title="Курс проданных $" Value="@result.AvgDollarSell" />

@code
{
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    [Parameter] public decimal Dollar { get; set; }
    PortfolioFinancialInfoModel result = new PortfolioFinancialInfoModel();

    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity.IsAuthenticated)
            result = await httpClient.GetFromJsonAsync<PortfolioFinancialInfoModel>($"portfolio/financial?dollar={Dollar}");
    }
}