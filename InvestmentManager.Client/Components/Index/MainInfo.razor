@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject Notification notice

<div class="container ir ibl iblbscd">
    <RowTitle Text="Общая информация" />
    <RowTitleSub Text="Накоплены следующие данные" />
    <LinkSmartRoute Route="companylist" Name="Копаний" Value="@result.CompanyCount" DetailAction="@(() => notice.ShowInfo("Компании обновлены",result.CompanyDateUpdate))" />
    <LinkSmartRoute Name="Отчетов" Value="@result.ReportCount" DetailAction="@(()=> notice.ShowInfo("Отчеты обновлены",result.ReportDateUpdate))" />
    <LinkSmartRoute Name="Коэффициентов" Value="@result.CoefficientCount" DetailAction="@(()=> notice.ShowInfo("Коэффициенты обновлены",result.CoefficientDateUpdate))" />
    <LinkSmartRoute Name="Цен" Value="@result.PriceCount" DetailAction="@(()=> notice.ShowInfo("Цены обновлены",result.PriceDateUpdate))" />
    <RowTitleSub Text="В результате их анализа имеется" />
    <LinkSmartRoute Name="рейтинг компаний" DetailAction="@(()=> notice.ShowInfo("Рейтинг обновлен",result.RatingDateUpdate))" />
    <RowTitleSub Text="По итогам которого доступны" />
    <LinkSmartRoute Route="buyrecommendation" Name="цены к покупке" Value="@result.BuyRecommendationCount" DetailAction="@(()=> notice.ShowInfo("Рекоммендации обновлены",result.BuyRecommendationDateUpdate))" />
    <RowTitleSub Text="А если" />
    <LinkSmartAction LinkAction="@(async () => await ClickInputFileButtonAsync("inputButton"))" Name="загрузить .xls отчеты от БКС" />
    <InputFile multiple OnChange="HandleSelectionAsync" id="inputButton" style="display:none" />
    <RowTitleSub Text="или" />
    <LinkSmartRoute Name="добавить транзакции" />
    <RowTitleSub Text="то станут доступны" />
    <LinkSmartAction LinkAction="@(async () => await CheckAccessAsync())" Name="рекомендации к продаже"/>
</div>

@code
{
    IndexModel result = new IndexModel();
    ClaimsPrincipal user;
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    HttpResponseMessage response;

    protected override async Task OnInitializedAsync()
    {
        result = await httpClient.GetFromJsonAsync<IndexModel>("index");
        user = (await AuthenticationState).User;
    }

    async Task HandleSelectionAsync(IFileListEntry[] files)
    {
        if (files != null)
        {
            var content = new MultipartFormDataContent();
            foreach (var file in files)
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                content.Add(new ByteArrayContent(ms.GetBuffer()), file.Name, file.Name);
                ms.Close();
            }

            response = await httpClient.PostAsync("portfolio/bcsreports", content);
            var reportModel = JsonSerializer.Deserialize<BrokerReportModel>
                (
                    await response.Content.ReadAsStringAsync().ConfigureAwait(false)
                    , new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                );

            content.Dispose();

            if (response.IsSuccessStatusCode)
            {
                await localStorage.SetItemAsync<BrokerReportModel>($"{user.Identity.Name}_bcsReport", reportModel).ConfigureAwait(false);
                navigationManager.NavigateTo("brokerreports");
            }
        }
    }

    async Task ClickInputFileButtonAsync(string inputFileId)
    {
        if (!user.Identity.IsAuthenticated)
        {
            await notice.NoticeAccessAsync();
            return;
        }

        await jsRuntime.InvokeVoidAsync("uploadBrokerReports", inputFileId);
    }

    async Task CheckAccessAsync()
    {
        if (user.Identity.IsAuthenticated)
            navigationManager.NavigateTo("sellrecommendation");
        else
            await notice.NoticeAccessAsync();
    }
}
