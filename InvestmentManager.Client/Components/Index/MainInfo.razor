@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
<AlertInv AlertType="@alertType" />
<LoadingInv IsLoading="isLoading"/>

<div class="container invest_card">
    <TitleInv Text="Общая информация" />
    <TitleSubInv Text="Накоплены следующие данные" />
    <LinkInv Path="companylist" Name="Копаний" Value="@result.CompanyCount" Date="@result.CompanyDateUpdate" />
    <LinkInv Name="Отчетов" Value="@result.ReportCount" Date="@result.ReportDateUpdate" />
    <LinkInv Name="Коэффициентов" Value="@result.CoefficientCount" Date="@result.CoefficientDateUpdate" />
    <LinkInv Name="Цен" Value="@result.PriceCount" Date="@result.PriceDateUpdate" />
    <TitleSubInv Text="В результате анализа которых формируется" />
    <LinkInv Name="рейтинг компаний" Date="@result.RatingDateUpdate" />
    <TitleSubInv Text="По итогам которого доступны" />
    <LinkInv Path="buyrecommendation" Name="цены к покупке" Value="@result.BuyRecommendationCount" Date="@result.BuyRecommendationDateUpdate" />
    <TitleSubInv Text="А если" />
    <LinkInv OnclickCallback="@(() => ClickInputFileButton("inputButton"))" Name="загрузить .xls отчеты от БКС" />
    <InputFile multiple OnChange="HandleSelection" id="inputButton" style="display:none" />
    <TitleSubInv Text="или" />
    <LinkInv Name="добавить операции по портфелю руками" />
    <TitleSubInv Text="то станут доступны" />
    <LinkInv Path="sellrecommendation" Name="рекомендации к продаже" />
</div>

@code
{
    AlertType alertType;
    bool isLoading;

    IndexModel result = new IndexModel();
    ClaimsPrincipal user;
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    HttpResponseMessage response;

    protected override async Task OnInitializedAsync()
    {
        result = await httpClient.GetFromJsonAsync<IndexModel>("index");
        user = (await AuthenticationState).User;
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        if (!user.Identity.IsAuthenticated)
        {
            alertType = AlertType.warning;
            return;
        }

        isLoading = true;

        if (files != null)
        {

            var content = new MultipartFormDataContent();
            foreach (var file in files)
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                content.Add(new ByteArrayContent(ms.GetBuffer()), file.Name, file.Name);
                ms.Close();
            }

            response = await httpClient.PostAsync("portfolio/bcsreports", content);
            var reportModel = JsonSerializer.Deserialize<BrokerReportModel>
                (
                    await response.Content.ReadAsStringAsync().ConfigureAwait(false)
                    , new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                );

            content.Dispose();

            if (response.IsSuccessStatusCode)
            {
                await localStorage.SetItemAsync<BrokerReportModel>($"{user.Identity.Name}_bcsReport", reportModel).ConfigureAwait(false);
                navigationManager.NavigateTo("brokerreports");
            }
            else
            {
                alertType = AlertType.danger;
                isLoading = false;
            }
        }
    }

    async Task ClickInputFileButton(string inputFileId)
    {
        await jsRuntime.InvokeVoidAsync("uploadBrokerReports", inputFileId);
    }
}
