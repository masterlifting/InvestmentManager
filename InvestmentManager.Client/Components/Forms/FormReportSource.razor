@inject CustomHttpClient http
@inject CustomNotification notice

<RowTitleSub Text="Roport source" />
@if (reportSource != null)
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="row mt-1 align-items-center">
            <div class="col">
                <ValidationMessage For="(() => reportSource.Key)" />
                <InputText placeholder="Enter report source key (required)" @bind-Value="reportSource.Key" />
                <ValidationMessage For="(() => reportSource.Value)" />
                <InputText placeholder="Enter report source value (required)" @bind-Value="reportSource.Value" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <ButtonAction Color="ColorCustom.isuccess" ClickAction="SaveClose" Title="Save" />
            </div>
        </div>
    </EditForm>
}
else
{
    <span>@DefaultString.loading</span>
}

@code {
    [Parameter] public long CompanyId { get; set; }
    [Parameter] public EventCallback<int> Step { get; set; }

    EditContext editContext;
    ReportSourceModel reportSource;

    protected override async Task OnInitializedAsync()
    {
        var respose = await http.GetAsync<ReportSourceModel>(new UrlBuilder(UrlController.ReportSources, UrlPath.ByCompanyId, CompanyId).Result);
        
        reportSource =  respose is null ? new ReportSourceModel { CompanyId = CompanyId }: respose;

        editContext = new EditContext(reportSource);

        await base.OnInitializedAsync();
    }

    async Task SaveClose()
    {
        if (editContext.Validate())
        {
            var result = reportSource.IsEditeble
                ? await http.PutAsync<BaseResult, ReportSourceModel>(new UrlBuilder(UrlController.ReportSources, reportSource.Id).Result, reportSource)
                : await http.PostAsync<BaseResult, ReportSourceModel>(new UrlBuilder(UrlController.ReportSources).Result, reportSource);

            if (result.IsSuccess)
            {
                await notice.AlertSuccesAsync(result.Info);
                await Step.InvokeAsync(200);
            }
            else
                notice.ToastDanger("Errors", result.Info);
        }
    }
}
