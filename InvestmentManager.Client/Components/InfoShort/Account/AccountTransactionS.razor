@inject QueryBaseService<SummaryAccountTransaction> queryService

<InfoTemplate InfoName="@InfoName" VisibleAction="((bool isVisible) => UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model is not null)
        {
            <KeyValueCols Key="Last transaction" Value="@model.DateLastTransaction.ToShortDateString()" />
            <KeyValueCols Key="Status" Value="@model.StatusName" />
            <KeyValueCols Key="Ammount" Value="@model.Amount.ToString("f2")" />
            <KeyValueCols Key="Added sum" Value="@model.TotalAddedSum.ToString("f2")" />

            <div class="col">
                <AccountTransactionF />
            </div>
        }
        else
        {
            <span>@info</span>
        }
    </ChildContent>
</InfoTemplate>

@code{
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }

    SummaryAccountTransaction model;

    string info = DefaultString.loading;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateTask).User;
        string CustomUrlBuilder(long accountId) => new UrlBuilder(UrlController.AccountTransactions, UrlPath.ByAccountId, accountId, UrlOption.Summary).Result;
        SummaryAccountTransaction CustomResultBuilder(List<SummaryAccountTransaction> models)
        {
            var targetModel = models.OrderBy(x => x.DateLastTransaction).Last();

            return new SummaryAccountTransaction
            {
                DateLastTransaction = targetModel.DateLastTransaction,
                StatusName = targetModel.StatusName,
                Amount = targetModel.Amount,
                TotalAddedSum = models.Sum(x => x.TotalAddedSum)
            };
        }

        var queryResult = await queryService.GetResultAsync(user, CustomUrlBuilder, CustomResultBuilder);

        model = queryResult.ResultContent;
        info = queryResult.ResultInfo;
    }
}