@inject CustomHttpClient http

<InfoTemplate InfoName="@InfoName" VisibleAction="((bool isVisible) => UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model is not null && model.IsHave)
        {
            <KeyValueCols Key="Date Update" Value="@model.DateUpdate.ToShortDateString()" />
            <KeyValueCols Key="Profit of 20%" Value="@($"{model.LotMin} lot(s) by price > {model.PriceMin}")" />
            <KeyValueCols Key="Profit of 50%" Value="@($"{model.LotMid} lot(s) by price > {model.PriceMid}")" />
            <KeyValueCols Key="Profit of 80%" Value="@($"{model.LotMax} lot(s) by price > {model.PriceMax}")" />
        }
        else
        {
            <span>@info</span>
        }
    </ChildContent>
</InfoTemplate>

@code{
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    string info = DefaultString.loading;
    SummarySellRecommendation model;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            var summary = await http.GetAsync<SummarySellRecommendation>(new UrlBuilder(UrlController.SellRecommendations, UrlPath.ByCompanyId, CompanyId, UrlOption.Summary).Result);

            if (summary.IsHave)
                model = summary;
            else
                info = DefaultString.notFound;
        }
        else
            info = DefaultString.noticeAccess;
    }
}