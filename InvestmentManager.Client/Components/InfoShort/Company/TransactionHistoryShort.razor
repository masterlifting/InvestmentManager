@inject CustomHttpClient http
@inject ILocalStorageService localStorage
@inject Notification notice

<InfoTemplate InfoName="@InfoName" VisibleAction="@(async (bool isVisible) => await UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model != null)
        {
            if (model.Error.IsSuccess)
            {
                <InformationCols Key="Last operation" Value="@model.LastDateTransaction" />
                <InformationCols Key="Type" Value="@model.Status" />
                <InformationCols Key="Lot" Value="@model.Lot" />
                <InformationCols Key="Price" Value="@model.Price" />
            }
            else
            {
                <ErrorComponent Text="There are no transactions for this company." />
            }
        }
        else
        {
            <span>@DefaultData.loading</span>
        }
    </ChildContent>
</InfoTemplate>

@code{
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    CompanyTransactionHistoryShortModel model;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User.Identity;

        if (await localStorage.ContainKeyAsync($"{DefaultData.IdName.accountIds}_{user.Name}"))
        {
            string values = JsonSerializer.Serialize(await localStorage.GetItemAsync<long[]>($"{DefaultData.IdName.accountIds}_{user.Name}"));
            model = await http.GetByIdValuesAsync<CompanyTransactionHistoryShortModel>(RouteName.company + "/transactionshort", CompanyId, values);
        }
        else
            await notice.AlertFailedAsync("you have no saved transactions");
    }
}