@inject CustomHttpClient http

<InfoTemplate InfoName="@InfoName" VisibleAction="@((bool isVisible) => UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model is not null && model.IsHave)
        {
            <KeyValueCols Key="Currency" Value="@model.CurrencyType" />
            <KeyValueCols Key="Sector" Value="@model.SectorName" />
            <KeyValueCols Key="Industry" Value="@model.IndustryName" />
        }
        else
        {
            <span>@info</span>
        }
    </ChildContent>
</InfoTemplate>

@code{
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    string info = DefaultString.loading;
    SummaryAdditional model;

    protected async override Task OnInitializedAsync()
    {
        var summary = await http.GetAsync<SummaryAdditional>(new UrlBuilder(UrlController.Companies, CompanyId, UrlOption.Summary).Result);

        if (summary.IsHave)
            model = summary;
        else
            info = DefaultString.notFound;
    }
}

