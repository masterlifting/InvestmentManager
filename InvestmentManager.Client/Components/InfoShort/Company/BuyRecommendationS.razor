@inject CustomHttpClient http

<InfoTemplate InfoName="@InfoName" VisibleAction="@((bool isVisible) => UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model is not null && model.IsHave)
        {
            <KeyValueCols KeySize="6" Key="Date Update" Value="@model.DateUpdate.ToShortDateString()" />
            <KeyValueCols KeySize="6" Key="Buy if the price is less" Value="@model.BuyPrice.ToString("f4")" />
        }
        else
        {
            <span>@info</span>
        }
    </ChildContent>
</InfoTemplate>

@code{
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    string info = DefaultString.loading;
    SummaryBuyRecommendation model;

    protected async override Task OnInitializedAsync()
    {
        var resultmary = await http.GetAsync<SummaryBuyRecommendation>(new UrlBuilder(UrlController.BuyRecommendations, UrlPath.ByCompanyId, CompanyId, UrlOption.Summary).Result);
        
        if (resultmary.IsHave)
            model = resultmary;
        else
            info = DefaultString.notFound;
    }
}