@inject CustomHttpClient http
@inject ILocalStorageService localStorage
@inject CustomNotification notice

<InfoTemplate InfoName="@InfoName" VisibleAction="((bool isVisible) => UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model is not null && model.IsHave)
        {
            <KeyValueCols Key="Last dividend" Value="@model.DateLastDividend.ToShortDateString()" />
            <KeyValueCols Key="Ammount" Value="@model.LastAmount.ToString("f2")" />
            <KeyValueCols Key="Sum" Value="@model.TotalSum.ToString("f2")" />

            <div class="col">
                <DividendF CompanyId="CompanyId" />
            </div>
        }
        else
        {
            <span>@info</span>
        }
    </ChildContent>
</InfoTemplate>

@code
{
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    string info = DefaultString.loading;
    SummaryDividend model;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            if (await localStorage.ContainKeyAsync($"{user.Identity.Name}_{DefaultString.Id.accountId}"))
            {
                var accountIds = await localStorage.GetItemAsync<long[]>($"{user.Identity.Name}_{DefaultString.Id.accountId}");

                if (accountIds.Any())
                {
                    var models = new List<SummaryDividend>();

                    foreach (var accountId in accountIds)
                    {
                        var summary = await http.GetAsync<SummaryDividend>(new UrlBuilder(UrlController.Dividends, UrlPath.ByAccountId, accountId, UrlPath.ByCompanyId, CompanyId, UrlOption.Summary).Result);

                        if (summary.IsHave)
                            models.Add(summary);
                    }

                    if (models.Any())
                    {
                        var targetData = models.OrderBy(x => x.DateLastDividend).Last();

                        model = new SummaryDividend
                        {
                            IsHave = true,
                            DateLastDividend = targetData.DateLastDividend,
                            LastAmount = targetData.LastAmount,
                            TotalSum = models.Sum(x => x.TotalSum)
                        };
                    }
                    else
                        info = DefaultString.notFound;
                }
                else
                    info = DefaultString.accountDisabled;
            }
            else
                info = DefaultString.accountNotFound;
        }
        else
            info = DefaultString.noticeAccess;
    }
}