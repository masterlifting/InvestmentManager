@inject CustomHttpClient http
@inject ILocalStorageService localStorage
@inject Notification notice

<InfoTemplate InfoName="@InfoName" VisibleAction="@(async (bool isVisible) => await UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model != null)
        {
            if (model.Error.IsSuccess)
            {

                <InformationCols Key="Date Update" Value="@model.DateUpdate" />
                <InformationCols Key="Profit of 20%" Value="@($"{model.LotMin} lot(s) by price > {model.PriceMin}")" />
                <InformationCols Key="Profit of 50%" Value="@($"{model.LotMid} lot(s) by price > {model.PriceMid}")" />
                <InformationCols Key="Profit of 80%" Value="@($"{model.LotMax} lot(s) by price > {model.PriceMax}")" />
            }
            else
            {
                <div class="col-12">
                    <ErrorComponent Text="There are no recommendations for this company." />
                </div>
            }
        }
        else
        {
            <span>@DefaultData.loading</span>
        }
    </ChildContent>
</InfoTemplate>

@code{
    RecommendationsForSaleShortModel model;
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    IIdentity identity;

    protected override async Task OnInitializedAsync()
    {
        identity = (await AuthenticationState).User.Identity;

        if (await localStorage.ContainKeyAsync($"{DefaultData.IdName.accountIds}_{identity.Name}"))
            model = await http.GetResultAsync<RecommendationsForSaleShortModel>(RouteName.recommendation + "/saleshort", CompanyId);
        else
            await notice.AlertFailedAsync("you have no saved transactions");
    }
}