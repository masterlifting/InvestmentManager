@inject CustomHttpClient http

<InfoTemplate InfoName="@InfoName" VisibleAction="((bool isVisible) => UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model is not null && model.IsHave)
        {
            <KeyValueCols Key="Date update" Value="@model.DateUpdate.ToShortDateString()" />
            <KeyValueCols Key="Last report" Value="@model.DateLastReport.ToShortDateString()" />
            <KeyValueCols Key="Report count" Value="@model.ReportsCount.ToString()" />
            <KeyValueCols Key="Last year" Value="@model.LastReportYear.ToString()" />
            <KeyValueCols Key="Last quarter" Value="@model.LastReportQuarter.ToString()" />

            <div class="col">
                <ReportF CompanyId="CompanyId" />
            </div>
        }
        else
        {
            <span>@info</span>
        }

    </ChildContent>
</InfoTemplate>

@code{
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    string info = DefaultString.loading;
    SummaryReport model;

    protected async override Task OnInitializedAsync()
    {
        var summary = await http.GetAsync<SummaryReport>(new UrlBuilder(UrlController.Reports, UrlPath.ByCompanyId, CompanyId, UrlOption.Summary).Result);
        
        if (summary.IsHave)
            model = summary;
        else
            info = DefaultString.notFound;
    }
}