@inject CustomHttpClient http

<InfoTemplate InfoName="@InfoName" VisibleAction="((bool isVisible) => UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model != null)
        {
            if (model.IsHave)
            {
                <KeyValueCols Key="Date update" Value="@model.DateUpdate.ToShortDateString()" />
                <KeyValueCols Key="Last report" Value="@model.DateLastReport.ToShortDateString()" />
                <KeyValueCols Key="Report count" Value="@model.ReportsCount.ToString()" />
                <KeyValueCols Key="Last year" Value="@model.LastReportYear.ToString()" />
                <KeyValueCols Key="Last quarter" Value="@model.LastReportQuarter.ToString()" />

                <div class="col">
                    <ReportF CompanyId="CompanyId" />
                </div>
            }
            else
            {
                <span>There are no reports for this company.</span>
            }
        }
        else
        {
            <span>@DefaultString.loading</span>
        }

    </ChildContent>
</InfoTemplate>

@code{
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    ReportSummaryModel model;
    protected async override Task OnInitializedAsync() =>
       model = await http.GetAsync<ReportSummaryModel>(new UrlBuilder(UrlController.Reports, UrlPath.ByCompanyId, CompanyId, UrlOption.Summary).Result);
}