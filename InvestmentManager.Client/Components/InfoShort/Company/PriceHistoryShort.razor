@inject CustomHttpClient http
<InfoTemplate InfoName="@InfoName" VisibleAction="@(async (bool isVisible) => await UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        @if (model != null)
        {
            if (model.Error.IsSuccess)
            {
                <InformationCols Key="Date price" Value="@model.DateUpdate" />
                <InformationCols Key="Last price" Value="@model.LastPrice" />
            }
            else
            {
                <div class="col-12">
                    <ErrorComponent ServerErrors="@model.Error.Errors" />
                </div>
            }
        }
        else
        {
            <span>@DefaultData.loading</span>
        }
    </ChildContent>
</InfoTemplate>

@code{
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }
    [Parameter] public long CompanyId { get; set; }

    PriceHistoryShortModel model;
    protected override async Task OnInitializedAsync() => model = await http.GetResultAsync<PriceHistoryShortModel>(RouteName.price + "/historyshort", CompanyId);
}