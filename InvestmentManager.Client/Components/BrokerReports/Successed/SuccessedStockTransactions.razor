@inject CustomHttpClient http
@inject CustomNotification notice
@inject ICatalogService catalogService

<RowTitleSub Text="Stock transactions" />

<div class="row icontent small">
    <div class="col">
        <div class="row text-info text-nowrap">
            <div class="col-7">
                <div class="row">
                    <div class="col-4">Status</div>
                    <div class="col-4">Exchange</div>
                    <div class="col-4">Volume</div>
                </div>
            </div>
            <div class="col-5">
                <div class="row">
                    <div class="col-6">Cost by 1</div>
                    <div class="col-6 text-center">Date</div>
                </div>
            </div>
        </div>
        @if (stockTransactions is not null)
        {
            foreach (var item in stockTransactions
                  .Join(tickers, x => x.TickerId, y => y.Id, (x, y) => new { Transaction = x, CompanyId = y.CompanyId, Ticker = y.Name })
                  .Join(companies, x => x.CompanyId, y => y.Id, (x, y) => new
                  {
                      x.Transaction,
                      x.Ticker,
                      Company = y.Name
                  }))
            {
                string color = catalogService.GetStatusBootstrapColor(item.Transaction.StatusId);
                string status = catalogService.GetStatusName(item.Transaction.StatusId);
                string exchange = catalogService.GetExchangeName(item.Transaction.ExchangeId);

                <div class="row ilink" @onclick="(() => SaveData(item.Transaction))">
                    <div class="col-12">@item.Ticker | @item.Company</div>
                    <div class="col-7">
                        <div class="row text-@color">
                            <div class="col-4">@status</div>
                            <div class="col-4">@exchange</div>
                            <div class="col-4">@item.Transaction.Quantity</div>
                        </div>
                    </div>
                    <div class="col-5">
                        <div class="row text-@color.ToString()">
                            <div class="col-6 px-0">@item.Transaction.Cost</div>
                            <div class="col-6 px-0 text-center">@item.Transaction.DateOperation.ToShortDateString()</div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public List<StockTransactionModel> StockTransactions { get; set; }

    List<StockTransactionModel> stockTransactions { get; set; }
    List<TickerModel> tickers;
    List<ShortView> companies;

    protected override async Task OnParametersSetAsync()
    {
        tickers = await http.GetAsync<List<TickerModel>>(new UrlBuilder(UrlController.Tickers).Result);
        companies = await http.GetAsync<List<ShortView>>(new UrlBuilder(UrlController.Companies).Result);

        if (tickers != default && companies != default)
            stockTransactions = StockTransactions;

        await base.OnInitializedAsync();
    }

    async Task SaveData(StockTransactionModel transaction)
    {
        var result = await http.PostAsync<BaseActionResult, StockTransactionModel>(new UrlBuilder(UrlController.StockTransactions).Result, transaction);

        if (result.IsSuccess)
        {
            await notice.AlertSuccesAsync(result.Info);
            stockTransactions.Remove(transaction);
        }
        else
            notice.ToastDanger("Stock transaction error.", result.Info);
    }
}
