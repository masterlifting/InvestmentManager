@inject CustomHttpClient http
@inject CustomNotification notice
@using static InvestmentManager.Client.Configurations.InvestHelper

<RowTitleSub Text="Account transactions" />

<div class="row icontent small">
    <div class="col">
        <div class="row text-info text-nowrap">
            <div class="col-7"> Status </div>
            <div class="col-5">
                <div class="row">
                    <div class="col-6 px-0">Sum</div>
                    <div class="col-6 px-0 text-center">Date</div>
                </div>
            </div>
        </div>

        @foreach (var transaction in accountTransactions)
        {
            ColorBootstrap color = ColorBootstrap.danger;
            TransactionStatus status = GetTransactionStatus(transaction.StatusId);

            if (status == TransactionStatus.Withdraw)
                color = ColorBootstrap.success;

            <div class="row ilink text-@color.ToString()" @onclick="(() => SaveData(transaction))">
                <div class="col-7">@status.ToString() </div>
                <div class="col-5">
                    <div class="row">
                        <div class="col-6 px-0">@transaction.Amount</div>
                        <div class="col-6 px-0 text-center">@transaction.DateOperation.ToShortDateString()</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public List<AccountTransactionModel> AccountTransactions { get; set; }
    List<AccountTransactionModel> accountTransactions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        accountTransactions = AccountTransactions;
        await base.OnInitializedAsync();
    }

    async Task SaveData(AccountTransactionModel transaction)
    {
        var result = await http.PostAsync<BaseResult, AccountTransactionModel>(new UrlBuilder(UrlController.AccountTransactions).Result, transaction);

        if (result.IsSuccess)
        {
            await notice.AlertSuccesAsync(result.Info);
            accountTransactions.Remove(transaction);
        }
        else
            notice.ToastDanger("Account transaction error.", result.Info);
    }
}
