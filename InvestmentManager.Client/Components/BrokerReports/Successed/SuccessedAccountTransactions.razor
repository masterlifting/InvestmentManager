@inject ICatalogService catalogService
@inject QueryBaseService<AccountTransactionModel> queryServise

<div class="row">
    <div class="col-6">
        <RowTitleSub Text="Account transactions" />
    </div>
    <div class="col-6 text-right">
        <span class="ilink" @onclick="SaveDataCollection">save all</span>
    </div>
</div>

<div class="row icontent small">
    <div class="col">
        <div class="row text-info text-nowrap">
            <div class="col-5"> Status </div>
            <div class="col-7">
                <div class="row">
                    <div class="col-6 px-0">Sum</div>
                    <div class="col-6 px-0 text-center">Date</div>
                </div>
            </div>
        </div>

        @foreach (var transaction in accountTransactions)
        {
            string color = catalogService.GetStatusBootstrapColor(transaction.StatusId);
            string ststusName = catalogService.GetStatusName(transaction.StatusId);
            string currency = transaction.CurrencyId switch
            {
                (long)CurrencyTypes.rub => "rub",
                (long)CurrencyTypes.usd => "usd",
                _ => "?"
            };

            <div class="row ilink text-@color" @onclick="(() => SaveData(transaction))">
                <div class="col-5">@ststusName </div>
                <div class="col-7">
                    <div class="row">
                        <div class="col-6 px-0">@(transaction.Amount + " " + currency)</div>
                        <div class="col-6 px-0 text-center">@transaction.DateOperation.ToShortDateString()</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public List<AccountTransactionModel> AccountTransactions { get; set; }
    List<AccountTransactionModel> accountTransactions { get; set; }

    protected override void OnParametersSet()
    {
        accountTransactions = AccountTransactions;
        base.OnParametersSet();
    }
    async Task SaveData(AccountTransactionModel transaction) =>
    await queryServise.PostDataAsync(transaction, accountTransactions, UrlController.AccountTransactions, "Account transaction");
    async Task SaveDataCollection()
    {
        accountTransactions = accountTransactions.OrderBy(x => x.DateOperation).ToList();
        await queryServise.PostDataCollectionAsync(accountTransactions, UrlController.AccountTransactions, "Account transactions");
    }
}
