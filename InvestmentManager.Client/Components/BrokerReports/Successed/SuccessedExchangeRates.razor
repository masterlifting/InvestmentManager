@inject CustomHttpClient http
@inject CustomNotification notice
@inject ICatalogService catalogService

<RowTitleSub Text="Exchange rates" />

<div class="row icontent small">
    <div class="col">
        <div class="row text-info text-nowrap">
            <div class="col-7">
                <div class="row">
                    <div class="col-8">Status</div>
                    <div class="col-4">Rate</div>
                </div>
            </div>
            <div class="col-5">
                <div class="row">
                    <div class="col-6">Volume</div>
                    <div class="col-6 text-center">Date</div>
                </div>
            </div>
        </div>

        @foreach (var rate in exchangeRates)
        {
            string color = catalogService.GetStatusBootstrapColor(rate.StatusId);
            string status = catalogService.GetStatusName(rate.StatusId);

            <div class="row ilink text-@color" @onclick="(() => SaveData(rate))">
                <div class="col-7">
                    <div class="row">
                        <div class="col-8">@status</div>
                        <div class="col-4">@rate.Rate</div>
                    </div>
                </div>
                <div class="col-5">
                    <div class="row">
                        <div class="col-6">@rate.Quantity</div>
                        <div class="col-6 text-center">@rate.DateOperation.ToShortDateString()</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<ExchangeRateModel> ExchangeRates { get; set; }

    List<ExchangeRateModel> exchangeRates { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        exchangeRates = ExchangeRates;
        await base.OnInitializedAsync();
    }

    async Task SaveData(ExchangeRateModel rate)
    {
        var result = await http.PostAsync<BaseActionResult, ExchangeRateModel>(new UrlBuilder(UrlController.ExchangeRates).Result, rate);

        if (result.IsSuccess)
        {
            await notice.AlertSuccesAsync(result.Info);
            exchangeRates.Remove(rate);
        }
        else
            notice.ToastDanger("Exchange rate error.", result.Info);
    }
}
