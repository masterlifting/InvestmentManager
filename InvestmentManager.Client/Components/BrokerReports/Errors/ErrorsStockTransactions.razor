@inject API api
@inject CustomNotification notice

<BaseError Title="@Title" IsDone="isDone" ErrorValue="@ErrorValue">
    <ChildContent>
        @if (model is not null)
        {
            <EditForm class="col-12" Model="model" OnValidSubmit="SendData">
                <DataAnnotationsValidator />

                <ValidationMessage For="(() => model.CompanyId)" />
                <InputSelect class="mb-2" @bind-Value="model.CompanyId">
                    @foreach (var i in companies)
                        {
                        <option value="@i.Id">@i.Name</option>
                        }
                </InputSelect>

                <ValidationMessage For="(() => model.LotId)" />
                <InputSelect class="mb-2" @bind-Value="model.LotId">
                    @foreach (var i in lots)
                        {
                        <option value="@i.Id">@i.Name</option>
                        }
                </InputSelect>

                <ValidationMessage For="(() => model.ExchangeId)" />
                <InputSelect class="mb-2" @bind-Value="model.ExchangeId">
                    @foreach (var i in exchanges)
                        {
                        <option value="@i.Id">@i.Name</option>
                        }
                </InputSelect>

                <ButtonSubmit Title="Исправить" Color="ColorCustom.iwarning" />
            </EditForm>
        }
    </ChildContent>
</BaseError>
@code {
    [Parameter] public string ErrorValue { get; set; }
    [Parameter] public string Title { get; set; }

    TickerModel model;
    List<ShortView> companies;
    List<ShortView> exchanges;
    List<ShortView> lots;
    bool isDone = false;

    protected override async Task OnParametersSetAsync()
    {
        companies = await api.Company.Value.GetShortCompaniesAsync();
        exchanges = await api.Catalog.Value.GetExchangeTypesAsync();
        lots = await api.Catalog.Value.GetLotTypesAsync();

        if (companies != default && exchanges != default && lots != default)
        {
            model = new TickerModel
            {
                Name = ErrorValue.Split('\'')[1],
                CompanyId = companies.First().Id,
                ExchangeId = exchanges.First().Id,
                LotId = lots.First().Id
            };
        }
    }

    async Task SendData()
    {
        var result = await api.Ticker.Value.AddNewAsync(model);
        if (result.IsSuccess)
        {
            isDone = true;
            await notice.AlertSuccesAsync(result.Info);
        }
        else
            notice.ToastDanger("Ticker error.", result.Info);
    }
}
