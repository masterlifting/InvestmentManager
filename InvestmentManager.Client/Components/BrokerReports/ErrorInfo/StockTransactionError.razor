@inject CustomHttpClient httpClient

<BaseError Title="@Title" IsDone="@isDone" ErrorValue="@ErrorValue">
    <EditForm Model="@result" OnValidSubmit="SendData">
        <DataAnnotationsValidator />

        <ValidationMessage For="@(() => result.CompanyId)" />
        <InputSelect @bind-Value="@result.CompanyId">
            <option selected value="">Какой компании принадлежит @result.TikerName?</option>
            @foreach (var i in model.Companies)
            {
                <option value="@i.Id">@i.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => result.LotId)" />
        <InputSelect @bind-Value="@result.LotId">
            <option selected value="">Сколькими лотами торгуется @result.TikerName?</option>
            @foreach (var i in model.Lots)
            {
                <option value="@i.Id">@i.Value</option>
            }
        </InputSelect>

        <ValidationMessage For="@(() => result.ExchangeId)" />
        <InputSelect @bind-Value="@result.ExchangeId">
            <option selected value="">На какой площадке торгуется @result.TikerName?</option>
            @foreach (var i in model.Exchanges)
            {
                <option value="@i.Id">@i.Name</option>
            }
        </InputSelect>

        <ButtonSubmit Title="Исправить" Color="Choice.Button.warning"/>
    
    </EditForm>
</BaseError>
@code {
    [Parameter] public string ErrorValue { get; set; }
    [Parameter] public string Title { get; set; }

    StockTransactionErrorModel model = new StockTransactionErrorModel();
    StockTransactionErrorResultModel result;
    bool isDone = false;

    protected override async Task OnParametersSetAsync()
    {
        result = new StockTransactionErrorResultModel { TikerName = ErrorValue.Split('\'')[1] };
        model = await httpClient.GetResultAsync<StockTransactionErrorModel>("error/stocktransactionerror");
    }

    async Task SendData() => isDone =  await httpClient.PostBoolAsync("error/stocktransactionerror", result, true);
}
