@inject HttpClient httpClient

<BaseError Title="@Title" IsDone="@isDone" ErrorValue="@ErrorValue">
    <EditForm Model="@result" OnValidSubmit="SendData">
        <DataAnnotationsValidator />

        <ValidationMessage For="@(() => result.CompanyId)" />
        <InputSelect class="ii" @bind-Value="@result.CompanyId">
            <option selected value="">Какой компании принадлежит @result.TikerName?</option>
            @foreach (var i in model.Companies)
            {
                <option value="@i.Id">@i.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => result.LotId)" />
        <InputSelect class="ii" @bind-Value="@result.LotId">
            <option selected value="">Сколькими лотами торгуется @result.TikerName?</option>
            @foreach (var i in model.Lots)
            {
                <option value="@i.Id">@i.Value</option>
            }
        </InputSelect>

        <ValidationMessage For="@(() => result.ExchangeId)" />
        <InputSelect class="ii" @bind-Value="@result.ExchangeId">
            <option selected value="">На какой площадке торгуется @result.TikerName?</option>
            @foreach (var i in model.Exchanges)
            {
                <option value="@i.Id">@i.Name</option>
            }
        </InputSelect>

        <div class="row mt-3">
            <div class="col">
                <button type="submit" class="btn btn-sm btn-warning w-100 rounded-pill">Исправить</button>
            </div>
        </div>
    </EditForm>
</BaseError>
@code {
    [Parameter] public string ErrorValue { get; set; }
    [Parameter] public string Title { get; set; }

    StockTransactionErrorModel model = new StockTransactionErrorModel();
    StockTransactionErrorResultModel result;
    bool isDone = false;

    protected override async Task OnInitializedAsync()
    {
        result = new StockTransactionErrorResultModel { TikerName = ErrorValue.Split('\'')[1] };
        model = await httpClient.GetFromJsonAsync<StockTransactionErrorModel>("error/stocktransactionerror");
    }

    async Task SendData()
    {
        isDone = true;
        var response = await httpClient.PostAsJsonAsync<StockTransactionErrorResultModel>("error/stocktransactionerror", result);
    }
}
