@inject CustomHttpClient httpClient
@using System.Text.RegularExpressions

<BaseError Title="@Title" IsDone="@isDone" ErrorValue="@ErrorValue">
    <EditForm Model="@result" OnValidSubmit="SendData">
        <DataAnnotationsValidator />

        <ValidationMessage For="@(() => result.CompanyId)" />
        <InputSelect  @bind-Value="@result.CompanyId">
            <option selected value="">Этот дивиденд какой компании?</option>
            @foreach (var i in model.Companies)
            {
                <option value="@i.Id">@i.Name</option>
            }
        </InputSelect>

        <RowTitleSub Color="Choice.Color.dark" Text="Возможный идентификатор дивиденда:" />

        <ValidationMessage For="@(() => result.IdentifierName)" />
        <InputText @bind-Value="@result.IdentifierName" />
        <ButtonSubmit Title="Исправить" Color="Choice.Button.warning" />
    </EditForm>
</BaseError>

@code {
    [Parameter] public string ErrorValue { get; set; }
    [Parameter] public string Title { get; set; }

    DividendErrorModel model = new DividendErrorModel();
    DividendErrorResultModel result;
    bool isDone = false;

    protected override async Task OnParametersSetAsync()
    {
        result = new DividendErrorResultModel { IdentifierName = Regex.Match(ErrorValue.Split('\'')[1], @", (\w*), налог").Groups[1].Value };
        model = await httpClient.GetResultAsync<DividendErrorModel>("error/dividenderror");
    }

    async Task SendData() => isDone = await httpClient.PostBoolAsync("error/dividenderror", result, true);
}
