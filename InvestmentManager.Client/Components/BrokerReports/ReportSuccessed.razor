@inject API api

<RowTitleSub Color="ColorBootstrap.muted" Text="Tap row to save" />
@if (reports is not null)
{
    foreach (var item in reports.Join(accounts, x => x.AccountId, y => y.Id, (x, y) => new { Report = x, AccountName = y.Name }))
    {
        <div class="row idark iframe">
            <div class="col">
                <RowTitle Color="ColorBootstrap.warning" Text="@item.AccountName" />

                @if (item.Report.AccountTransactions.Any())
                {
                    <SuccessedAccountTransactions AccountTransactions="item.Report.AccountTransactions" />
                }
                @if (item.Report.StockTransactions.Any())
                {
                    <SuccessedStockTransactions StockTransactions="item.Report.StockTransactions" />
                }
                @if (item.Report.Comissions.Any())
                {
                    <SuccessedComissions Comissions="item.Report.Comissions" />
                }
                @if (item.Report.Dividends.Any())
                {
                    <SuccessedDividends Dividends="item.Report.Dividends" />
                }
                @if (item.Report.ExchangeRates.Any())
                {
                    <SuccessedExchangeRates ExchangeRates="item.Report.ExchangeRates" />
                }

            </div>
        </div>
    }
}

@code {
    [Parameter] public List<BrokerReportSuccessedModel> Reports { get; set; }

    List<BrokerReportSuccessedModel> reports;
    List<AccountModel> accounts;

    protected override async Task OnParametersSetAsync()
    {
        accounts = await api.Account.Value.GetAccountsAsync();
        if (accounts != default)
            reports = Reports;

        await base.OnParametersSetAsync();
    }
}
