@inject CustomHttpClient http
@inject CustomNotification notice

<h5>Company</h5>
@if (company != null)
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="row mt-1 align-items-center">
            <div class="col">
                <ValidationMessage For="@(() => company.Name)" />
                <InputText placeholder="Enter company name (required)" @bind-Value="company.Name" />
            </div>
        </div>
        <div class="row mt-1 align-items-center">
            <div class="col-3">Sector</div>
            <div class="col-9">
                <ValidationMessage For="@(() => company.SectorId)" />
                <InputSelect @bind-Value="company.SectorId">
                    @foreach (var sector in company.Sectors)
                        {
                        <option value="@sector.Id">@sector.Name</option>
                        }
                </InputSelect>
            </div>
        </div>
        <div class="row mt-1 align-items-center">
            <div class="col-3">Industry</div>
            <div class="col-9">
                <ValidationMessage For="@(() => company.IndustryId)" />
                <InputSelect @bind-Value="company.IndustryId">
                    @foreach (var industry in company.Industries)
                        {
                        <option value="@industry.Id">@industry.Name</option>
                        }
                </InputSelect>
            </div>
        </div>
        <div class="row mt-1 align-items-center">
            <div class="col-3 text-nowrap">Date split</div>
            <div class="col-9">
                <ValidationMessage For="@(() => company.DateSplit)" />
                <InputDate @bind-Value="company.DateSplit" />
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <ButtonAction Color="@Choice.InvestColor.idark" ClickAction="SaveClose" Title="Save and close" />
            </div>
            <div class="col-6">
                <ButtonAction Color="@Choice.InvestColor.isuccess" ClickAction="SaveNext" Title="Save and next" />
            </div>
        </div>
    </EditForm>
}
else
{
    <span>@DefaultData.loading</span>
}

@code {
    [Parameter] public long? CompanyId { get; set; }
    [Parameter] public EventCallback<(int, long)> FirstStep { get; set; }

    EditContext editContext;
    FormCompanyModel company;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        company = await http.GetByIdAsync<FormCompanyModel>(Routes.C.Company + "/getcompanyform", CompanyId);
        editContext = new EditContext(company);
    }

    async Task SaveClose() => await FormSubmit(200);
    async Task SaveNext() => await FormSubmit(1);
    async Task FormSubmit(int step)
    {
        if (editContext.Validate())
        {
            var result = await http.PostAsModelAsync<CompanyResult, FormCompanyModel>(Routes.C.Company + "/setcompany", company);

            if (result.IsSuccess)
            {
                await FirstStep.InvokeAsync((step, result.CompanyId));
                await notice.AlertSuccesAsync();
            }
            else
                notice.ToastDanger("Errors", string.Join("; ", result.Errors));
        }
    }
}
