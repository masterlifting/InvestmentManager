@inject CustomHttpClient http
@inject CustomNotification notice

<FormTemplate InfoName="@InfoName" VisibleAction="@(async (bool isVisible) => await UpdateVisible.InvokeAsync(isVisible))">
    <ChildContent>
        <div class="col">
            @if (data != null && company != null)
            {
                <EditForm Model="@company" OnValidSubmit="SaveCanges">
                    <ObjectGraphDataAnnotationsValidator />
                    <div class="row mt-1 align-items-center">
                        <div class="col">
                            <ValidationMessage For="@(() => company.Name)" />
                            <InputText placeholder="Enter company name (required)" @bind-Value="company.Name" />
                        </div>
                    </div>
                    <div class="row mt-1 align-items-center">
                        <div class="col-3">Sector</div>
                        <div class="col-9">
                            <ValidationMessage For="@(() => company.SectorId)" />
                            <InputSelect @bind-Value="company.SectorId">
                                @foreach (var sector in data.Sectors)
                                    {
                                    <option value="@sector.Id">@sector.Name</option>
                                    }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row mt-1 align-items-center">
                        <div class="col-3">Industry</div>
                        <div class="col-9">
                            <ValidationMessage For="@(() => company.IndustryId)" />
                            <InputSelect @bind-Value="company.IndustryId">
                                @foreach (var industry in data.Industries)
                                    {
                                    <option value="@industry.Id">@industry.Name</option>
                                    }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row mt-1 align-items-center">
                        <div class="col-3 text-nowrap">Date split</div>
                        <div class="col-9">
                            <ValidationMessage For="@(() => company.DateSplit)" />
                            <InputDate @bind-Value="company.DateSplit" />
                        </div>
                    </div>

                    <div class="dropdown-divider"></div>
                    @foreach (var ticker in company.Tickers)
                    {
                        <div class="row mt-1 align-items-center">
                            <div class="col">
                                <ValidationMessage For="@(() => ticker.Name)" />
                                <InputText placeholder="Enter company ticker (required)" @bind-Value="ticker.Name" />
                            </div>
                        </div>
                        <div class="row mt-1 align-items-center">
                            <div class="col-3 text-nowrap">Lot value</div>
                            <div class="col-9">
                                <ValidationMessage For="@(() => ticker.LotId)" />
                                <InputSelect @bind-Value="@ticker.LotId">
                                    @foreach (var lot in data.Lots)
                                            {
                                        <option value="@lot.Id">@lot.Name</option>
                                            }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row mt-1 align-items-center">
                            <div class="col-3">Exchange</div>
                            <div class="col-9">
                                <ValidationMessage For="@(() => ticker.ExcangeId)" />
                                <InputSelect @bind-Value="ticker.ExcangeId">
                                    @foreach (var exchange in data.Exchanges)
                                            {
                                        <option value="@exchange.Id">@exchange.Name</option>
                                            }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row">
                            <span class="col-4 ilink text-danger text-nowrap" @onclick="@(() => RemoveTicker(ticker))">remove this</span>
                        </div>
                    }
                    <div class="row">
                        <span class="offset-8 col-4 text-right ilink text-nowrap" @onclick="AddTicker">add ticker</span>
                    </div>

                    <div class="dropdown-divider"></div>
                    @foreach (var isin in company.Isins)
                    {
                        <div class="row mt-1 align-items-center">
                            <div class="col">
                                <ValidationMessage For="@(() => isin.Name)" />
                                <InputText placeholder="Enter isin (optional)" @bind-Value="isin.Name" />
                            </div>
                        </div>
                        <div class="row">
                            <span class="col-4 ilink text-danger text-nowrap" @onclick="@(() => RemoveIsin(isin))">remove this</span>
                        </div>
                    }
                    <div class="row">
                        <span class="offset-8 col-4 text-right ilink text-nowrap" @onclick="AddIsin">add isin</span>
                    </div>

                    <div class="dropdown-divider"></div>
                    <div class="row mt-1 align-items-center">
                        <div class="col">
                            <ValidationMessage For="@(() => company.ReportSource.Key)" />
                            <InputText placeholder="Enter report source key (required)" @bind-Value="company.ReportSource.Key" />
                            <ValidationMessage For="@(() => company.ReportSource.Value)" />
                            <InputText placeholder="Enter report source value (required)" @bind-Value="company.ReportSource.Value" />
                        </div>
                    </div>

                    <ButtonSubmit Color="@Choice.InvestColor.isuccess" Title="Save" />

                </EditForm>
            }
            else
            {
                <span>@DefaultData.loading</span>
            }
        </div>
    </ChildContent>
</FormTemplate>

@code{
    CompanyFormModel company;
    CompanyFormModelData data;

    [Parameter] public long? CompanyId { get; set; }
    [Parameter] public EventCallback<bool> UpdateVisible { get; set; }
    [Parameter] public string InfoName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        data = await http.GetNoParametersAsync<CompanyFormModelData>(Routes.C.Company + Routes.A.New);

        if (CompanyId.HasValue)
        {
            var editebleCompany = await http.GetByIdAsync<CompanyFormModel>(Routes.C.Company + Routes.A.Editeble, CompanyId.Value);
            company = new CompanyFormModel
            {
                Id = editebleCompany.Id,
                Name = editebleCompany.Name,
                DateSplit = editebleCompany.DateSplit,
                IndustryId = editebleCompany.IndustryId,
                SectorId = editebleCompany.SectorId,
                Tickers = editebleCompany.Tickers,
                Isins = editebleCompany.Isins,
                ReportSource = editebleCompany.ReportSource
            };
        }
        else
            company = new CompanyFormModel
            {
                IndustryId = data.Industries.First().Id.ToString(),
                SectorId = data.Sectors.First().Id.ToString(),
                Tickers = new List<TickerModel> { new TickerModel
                {
                    ExcangeId = data.Exchanges.First().Id.ToString(),
                    LotId = data.Lots.First().Id.ToString()
                } },
                Isins = new List<IsinModel> { new IsinModel() },
                ReportSource = new ReportSourceModel { Key = "investing" }
            };
    }
    void AddTicker()
    {
        company.Tickers.Add(new TickerModel
        {
            ExcangeId = data.Exchanges.First().Id.ToString(),
            LotId = data.Lots.First().Id.ToString()
        });
    }
    void RemoveTicker(TickerModel ticker) => company.Tickers.Remove(ticker);
    void AddIsin() => company.Isins.Add(new IsinModel());
    void RemoveIsin(IsinModel isin) => company.Isins.Remove(isin);

    async Task SaveCanges()
    {
        ErrorBaseModel error;
        if (CompanyId.HasValue)
            error = await http.PostAsModelAsync<ErrorBaseModel, CompanyFormModel>(Routes.C.Company + Routes.A.Update, company);
        else
            error = await http.PostAsModelAsync<ErrorBaseModel, CompanyFormModel>(Routes.C.Company + Routes.A.Save, company);

        if (error.IsSuccess)
            notice.ToastSuccess("Saving company", "Success!");
        else
            notice.ToastDanger("Saving company", string.Join("; ", error.Errors));
    }
}

