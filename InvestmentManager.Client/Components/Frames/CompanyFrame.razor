@inject CustomNotification notice

<FrameTemplate Name="@Name" TitleColor="ColorBootstrap.warning">
    <InfoBlock>
        <MultiRow Name="@additionalInfo" IconName="info" Action="(() => isAdditionalInfo = !isAdditionalInfo)" Description="Test description" />
        <MultiRow Name="@transactions" IconName="yen" Action="(() => isTransactions = !isTransactions)" />
        <MultiRow Name="@rating" IconName="bar-chart" Action="(() => isRating = !isRating )" />
        <MultiRow Name="@buyRecommendations" IconName="plus" Action="(() => isBuyRecommendations = !isBuyRecommendations)" />
        <MultiRow Name="@sellRecommendations" IconName="minus" Action="(() => isSellRecommendations = !isSellRecommendations)" />
        <MultiRow Name="@coefficient" IconName="calculator" Action="(() => isCoefficient = !isCoefficient)" />
        <MultiRow Name="@report" IconName="document" Action="(() => isReport = !isReport )" />
        <MultiRow Name="@price" IconName="graph" Action="(() => isPrice = !isPrice)" />
        <MultiRow Name="@dividend" IconName="target" Action="(() => isDividend = !isDividend)" />
        <MultiRow Name="@edit" IconName="pencil" Action="(() => isEdit = !isEdit)" />
    </InfoBlock>
    <ActionBlock>
        @if (isAdditionalInfo)
        {
            <AdditionalInfoS InfoName="@additionalInfo" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isAdditionalInfo = isVisible)" />
        }
        @if (isTransactions)
        {
            if (user.Identity.IsAuthenticated)
            {
                <StockTransactionS InfoName="@transactions" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isTransactions = isVisible)" />
            }
            else
            {
                isTransactions = false;
                Task.FromResult(notice.AlertAccessAsync());
            }
        }
        @if (isRating)
        {
            <RatingS InfoName="@rating" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isRating = isVisible)" />
        }
        @if (isBuyRecommendations)
        {
            <BuyRecommendationS InfoName="@buyRecommendations" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isBuyRecommendations = isVisible)" />
        }
        @if (isSellRecommendations)
        {
            if (user.Identity.IsAuthenticated)
            {
                <SellRecommendationS InfoName="@sellRecommendations" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isSellRecommendations = isVisible)" />
            }
            else
            {
                isSellRecommendations = false;
                Task.FromResult(notice.AlertAccessAsync());
            }
        }
        @if (isCoefficient)
        {
            <CoefficientS InfoName="@coefficient" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isCoefficient = isVisible)" />
        }
        @if (isReport)
        {
            <ReportS InfoName="@report" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isReport = isVisible)" />
        }
        @if (isPrice)
        {
            <PriceS InfoName="@price" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isPrice = isVisible)" />
        }
        @if (isDividend)
        {
            <DividendS InfoName="@dividend" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isDividend = isVisible)" />
        }
        @if (isEdit)
        {
            if (user.IsInRole("pestunov"))
            {
            <FormCompanyComplex InfoName="@edit" CompanyId="CompanyId" UpdateVisible="((bool isVisible) => isEdit = isVisible)" />
            }
            else
            {
                isEdit = false;
                Task.FromResult(notice.AlertAccessAsync("You are not an admin!"));
            }
        }
    </ActionBlock>
</FrameTemplate>

@code {
    [Parameter] public long CompanyId { get; set; }
    [Parameter] public string Name { get; set; }

    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    ClaimsPrincipal user;
    protected override async Task OnInitializedAsync() => user = (await AuthenticationState).User;

    string additionalInfo = "Additional information";
    string rating = "Rating details";
    string transactions = "Transactions";
    string buyRecommendations = "Recommendation for buy";
    string sellRecommendations = "Recommendations for sale";
    string coefficient = "Coefficient history";
    string report = "Report history";
    string price = "Price history";
    string dividend = "Dividend history";
    string edit = "Edit company";

    bool isAdditionalInfo;
    bool isRating;
    bool isTransactions;
    bool isBuyRecommendations;
    bool isSellRecommendations;
    bool isCoefficient;
    bool isReport;
    bool isPrice;
    bool isDividend;
    bool isEdit;
}
