@inject CustomHttpClient http
@inject CustomNotification notice
@inject ILocalStorageService localStorage

<FrameTemplate Theme="Choice.InvestColor.isuccess" Name="@sum" TitleColor="Choice.TextColor.light">
    <AdditionalBlock>
        <div class="col-12">
            @foreach (var account in Accounts)
            {
                <div class="row align-items-center pt-1">
                    <div class="col-2 col-md-1">
                        <SelectorComponent IsSelected="account.IsActive" SelectedId="account.Id" SelectorAction="ToggleSelector" />
                    </div>
                    <div class="col-10 col-md-11 small">@account.Name</div>
                </div>
            }
        </div>
    </AdditionalBlock>
    <InfoBlock>
        <MultiRow Name="Accounts information" IconName="info" />
        <MultiRow Name="Transactions" IconName="yen" />
        <MultiRow Name="Exchange rate" IconName="loop" />
        <MultiRow Name="Add a transaction manually" IconName="pencil" />
        <MultiRow Name="@fileLoader" IconName="data-transfer-download" Action="@(() => isLoadFile = !isLoadFile)" Description="Available only for the Russian broker BCS" />
        <MultiRow Name="Analytics" IconName="pie-chart" />
    </InfoBlock>
</FrameTemplate>
@if (isLoadFile)
{
    <ReportLoader />
}

@code {
    string sum = "0.00";
    string fileLoader = "Upload files (xls) with transactions";
    bool isLoadFile;

    List<AccountFrameModel> Accounts = new List<AccountFrameModel>();
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    IIdentity user;
    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationState).User.Identity;
        if (user.IsAuthenticated)
        {
            Accounts = await http.GetNoParametersAsync<List<AccountFrameModel>>(RouteName.account + "/all");
            sum = Accounts.Sum(x => x.Sum).ToString("C");
            if (Accounts.Any())
                await localStorage.SetItemAsync($"{DefaultData.IdName.accountIds}_{user.Name}", Accounts.Where(x => x.IsActive).Select(x => x.Id).ToArray());
        }
    }

    public async Task ToggleSelector((bool isSelected, long selectedId) selector)
    {
        Accounts.First(x => x.Id == selector.selectedId).IsActive = selector.isSelected;
        long[] selectedIds = Accounts.Where(x => x.IsActive).Select(x => x.Id).ToArray();
        sum = (await http.GetByValuesAsync<List<AccountFrameModel>>(RouteName.account + "/selected", JsonSerializer.Serialize(selectedIds))).Sum(x => x.Sum).ToString("C");
        await localStorage.SetItemAsync($"{DefaultData.IdName.accountIds}_{user.Name}", selectedIds);
    }
}
