@inject CustomHttpClient http
@inject CustomNotification notice
@inject NavigationManager navigation

<FrameTemplate Theme="Choice.InvestColor.idanger" Name="Administrator" TitleColor="Choice.TextColor.light">
    <InfoBlock>
        <MultiRow Name="Recalculate all" IconName="calculator" Action="RecalculateAll" />
        <MultiRow Name="Load prices" IconName="script" Action="GetNewPrice" />
        <MultiRow Name="Load reports" IconName="document" Action="ParseNewReports" />
        <MultiRow Name="Check reports" IconName="check" Action="CheckParsedReports" />
        <MultiRow Name="@addCompany" IconName="file" Action="AddCompany" />
    </InfoBlock>
    <ActionBlock>
        @if (isAddingCompany)
        {
            <FormCompanyComplex InfoName="@addCompany" CompanyId="null" UpdateVisible="@((bool isVisible) => isAddingCompany = isVisible)" />
        }
    </ActionBlock>
</FrameTemplate>

@code {
    string addCompany = "Add new company";
    bool isAddingCompany;

    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }

    async Task RecalculateAll()
    {
        if (await IsAdmin())
            await http.GetVoidAsync(Routes.C.Admin + "/recalculateall", true);
    }
    async Task GetNewPrice()
    {
        if (await IsAdmin())
            await http.GetVoidAsync(Routes.C.Price + Routes.A.New);
    }
    async Task ParseNewReports()
    {
        if (await IsAdmin())
            await http.GetVoidAsync(Routes.C.CompanyReport + Routes.A.Parse);
    }
    async Task CheckParsedReports()
    {
        if (await IsAdmin())
            navigation.NavigateTo("/companyreportforms");
    }
    async Task AddCompany()
    {
        if (await IsAdmin())
            isAddingCompany = !isAddingCompany;
    }
    async Task<bool> IsAdmin()
    {
        bool result = false;

        if ((await AuthenticationState).User.IsInRole("pestunov"))
            result = true;
        else
            await notice.AlertAccessAsync("You are not an admin!");

        return result;
    }
}
