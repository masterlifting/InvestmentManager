@inject CustomHttpClient httpClient

<div class="row icontent">
    @if (model != null)
    {
        string lastPrice = model.CurrencyId == 2 ? model.LastPriceValue.ToString("C") : model.LastPriceValue.ToString("C", new CultureInfo("en-US"));
        string buyPrice = model.CurrencyId == 2 ? model.BuyPrice.ToString("C") : model.BuyPrice.ToString("C", new CultureInfo("en-US"));
        Choice.Color color = Choice.Color.danger;
        Choice.Color nameColor = Choice.Color.warning;
        if (model.IsRecommend)
        {
            color = Choice.Color.success;
            nameColor = Choice.Color.success;
        }

        <div class="container idark iframe small">
            <RowTitle Text="@model.CompanyName" Color="@nameColor" />
            <div class="row icontent">
                <div class="col ">
                    <RowSingleInfo Title="Цена обновлена:" Value="@model.LastPriceDate" />
                    <RowSingleInfo Title="Последняя цена:" Value="@lastPrice" Color="Choice.Color.info" />
                    <RowSingleInfo Title="Покупать по:" Value="@buyPrice" Color="@color" />
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public long CompanyId { get; set; }
    BuyRecommendationModel model;
    protected override async Task OnParametersSetAsync()
    {
        model = await httpClient.GetResultAsync<BuyRecommendationModel>("recommendation/buyrecommendation", CompanyId);
    }
}
