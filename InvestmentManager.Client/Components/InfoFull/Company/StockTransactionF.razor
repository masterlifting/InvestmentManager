@inject QueryBaseService<StockTransactionModel> queryService


<DetailTemplate Name="Transaction list" DetailTemplateAction="ShowInfo">
    <ChildContent>
        @if (items is not null)
        {
            <TableVertical TItem="StockTransactionModel" DataItems="items.OrderByDescending(x => x.DateOperation).ToList()" Columns="columns" />
        }
        else
        {
            <span>@info</span>
        }
    </ChildContent>
</DetailTemplate>

@code {
    [Parameter] public long CompanyId { get; set; }
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }

    public string info = DefaultString.loading;

    List<StockTransactionModel> items;
    List<ColumnConfig> columns;

    async Task ShowInfo(bool isDetails)
    {
        if (isDetails == true)
        {
            var user = (await AuthenticationState).User;
            string CustomUriBuilder(long accountId) => new UrlBuilder(UrlController.StockTransactions, UrlPath.ByAccountId, accountId, UrlPath.ByCompanyId, CompanyId).Result;
            ColumnConfig[] CustomColumnBuilder() => new ColumnConfig[]
                {
                            new ColumnConfig{DataField = nameof(StockTransactionModel.DateOperation), Caption = "Date", DataType = HtmlDataType.Date, Format = "d", AlignType=AlignType.Center},
                            new ColumnConfig{DataField = nameof(StockTransactionModel.StatusName), Caption = "Status", DataType = HtmlDataType.String, AlignType=AlignType.Center},
                            new ColumnConfig{DataField = nameof(StockTransactionModel.Quantity), Caption = "Volume", DataType = HtmlDataType.Number, Format = "f0", AlignType=AlignType.Center},
                            new ColumnConfig{DataField = nameof(StockTransactionModel.Cost), Caption = "Cost", DataType = HtmlDataType.Number, Format = "#,#0.###", AlignType=AlignType.Center},
                };

            var queryResult = await queryService.GetResultsAsync(user, CustomUriBuilder, CustomColumnBuilder);

            columns = queryResult.Columns;
            items = queryResult.ViewResult.ResultContents;
            info = queryResult.ViewResult.ResultInfo;
        }
    }
}
