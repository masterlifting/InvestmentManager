@page "/register"
@inject IAuthService  AuthService
@inject NavigationManager NavigationManager

<div class="container h-100">
    @if (withErrors)
    {
        <div class="alert alert-danger" role="alert">
            @foreach (var error in errors)
            {
                <p>@error</p>
            }
        </div>
    }
    <div class="row h-100">
        <div class="col offset-md-3 col-md-6 align-self-center">
            <EditForm class="icard" Model="registerModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col ">
                        <InputText type="email" placeholder="введите email" @bind-Value="registerModel.Email" />
                    </div>
                </div>

                <div class="row my-3">
                    <div class="col">
                        <InputText type="password" placeholder="введите пароль" @bind-Value="registerModel.Password" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <InputText type="password" placeholder="повторите пароль" @bind-Value="registerModel.PasswordConfirm" />
                    </div>
                </div>

                <ButtonSubmit Title="Зарегистрироваться" Color="Choice.Button.success"/>

            </EditForm>
        </div>
    </div>
</div>
@code {
    RegisterModel registerModel = new RegisterModel();
    bool withErrors;
    IEnumerable<string> errors;

    async Task HandleRegistration()
    {
        withErrors = false;
        var result = await AuthService.RegisterAsync(registerModel);

        if (result.Successful)
            NavigationManager.NavigateTo("/login");
        else
        {
            errors = result.Errors;
            withErrors = true;
        }
    }
}
