@page "/register"
@inject IAuthService  AuthService
@inject NavigationManager NavigationManager

<div class="row isecodary iframe" style="margin-top:30vh">
    <EditForm class="col" Model="registerModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (withErrors)
        {
            foreach (var error in errors)
            {
                <div class="row validation-message">
                    <div class="col">@error</div>
                </div>
            }
        }
        <div class="row">
            <div class="col ">
                <InputText type="email" placeholder="email" @bind-Value="registerModel.Email" />
            </div>
        </div>

        <div class="row my-3">
            <div class="col">
                <InputText type="password" placeholder="password" @bind-Value="registerModel.Password" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col">
                <InputText type="password" placeholder="repeat password" @bind-Value="registerModel.PasswordConfirm" />
            </div>
        </div>

        <ButtonSubmit Title="Register" Color="Choice.InvestColor.isuccess" />
    </EditForm>
</div>

@code {
    RegisterModel registerModel = new RegisterModel();
    bool withErrors;
    IEnumerable<string> errors;

    async Task HandleRegistration()
    {
        withErrors = false;
        var result = await AuthService.RegisterAsync(registerModel);

        if (result.IsSuccess)
            NavigationManager.NavigateTo("/login");
        else
        {
            errors = result.Errors;
            withErrors = true;
        }
    }
}
