@page "/buyrecommendation"
@inject HttpClient httpClient

@if (Recommendations != null)
{
    foreach (var r in Recommendations.OrderByDescending(x => x.IsRecommend).ThenBy(x => (x.LastPriceValue - x.BuyPrice)))
    {
        string lastPrice = r.CurrencyId == 2 ? r.LastPriceValue.ToString("C") : r.LastPriceValue.ToString("C", new CultureInfo("en-US"));
        string buyPrice = r.CurrencyId == 2 ? r.BuyPrice.ToString("C") : r.BuyPrice.ToString("C", new CultureInfo("en-US"));
        Choice.Color color = r.IsRecommend ? Choice.Color.success : Choice.Color.danger;

        <div class="container icard small">
            <RowTitle Text="@r.CompanyName"  Color="Choice.Color.warning"/>
            <RowSingleInfo Title="Цена обновлена:" Value="@r.LastPriceDate" />
            <RowSingleInfo Title="Последняя цена:" Value="@lastPrice" Color="Choice.Color.info" />
            <RowSingleInfo Title="Покупать по:" Value="@buyPrice" Color="@color" />
        </div>
    }
}

@code {
    IEnumerable<BuyRecommendationModel> Recommendations;
    protected override async Task OnInitializedAsync() =>
        Recommendations = await httpClient.GetFromJsonAsync<IEnumerable<BuyRecommendationModel>>("recommendation/buyr");
}
