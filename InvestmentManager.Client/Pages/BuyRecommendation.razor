@page "/buyrecommendation"
@inject CustomHttpClient httpClient
@inject Notification notice

@if (Recommendations != null)
{
    foreach (var r in Recommendations.OrderByDescending(x => x.IsRecommend).ThenBy(x => (x.LastPriceValue - x.BuyPrice)))
    {
        string lastPrice = r.CurrencyId == 2 ? r.LastPriceValue.ToString("C") : r.LastPriceValue.ToString("C", new CultureInfo("en-US"));
        string buyPrice = r.CurrencyId == 2 ? r.BuyPrice.ToString("C") : r.BuyPrice.ToString("C", new CultureInfo("en-US"));
        Choice.Color color = Choice.Color.danger;
        Choice.Color nameColor = Choice.Color.warning;
        if (r.IsRecommend)
        {
            color = Choice.Color.success;
            nameColor = Choice.Color.success;
        }

        <div class="container icard small">
            <RowTitle Text="@r.CompanyName" Color="@nameColor" />
            <div class="row icard-content">
                <div class="col ">
                    <RowSingleInfo Title="Цена обновлена:" Value="@r.LastPriceDate" />
                    <RowSingleInfo Title="Последняя цена:" Value="@lastPrice" Color="Choice.Color.info" />
                    <RowSingleInfo Title="Покупать по:" Value="@buyPrice" Color="@color" />
                </div>
            </div>
        </div>
    }
    notice.LoadStop();
}

@code {
    IEnumerable<BuyRecommendationModel> Recommendations;

    protected override async Task OnInitializedAsync()
    {
        notice.LoadStart();
        Recommendations = await httpClient.GetResultAsync<IEnumerable<BuyRecommendationModel>>("recommendation/buyr");
    }
}
