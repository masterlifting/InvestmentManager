@page "/financialreportsform"
@inject HttpClient httpClient

<div class="container">
    <div class="row justify-content-center">
        <div class="h5 text-secondary">Не  проверенные отчеты</div>
    </div>
</div>

@foreach (var result in newReports)
{
    <div class="container invest_card">
        <RowTitle Color="Choices.Color.warning" Text="@result.CompanyName" />

        @foreach (var report in result.Reports)
        {
            <EditForm class="border-bottom border-dark my-2" Model="@report" OnValidSubmit="@(() => SaveReport(report, result.CompanyName))">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row ">
                    <div class="col-6 invest_Label">Дата</div>
                    <InputDate class="col-5 invest_Input" @bind-Value="@report.DateReport" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Всего акций</div>
                    <InputNumber ParsingErrorMessage="Колличество акций должно быть числом" class="col-5 invest_Input" @bind-Value="@report.StockVolume" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Дивиденды</div>
                    <InputNumber ParsingErrorMessage="Дивиденды должны быть числом" class="col-5 invest_Input" @bind-Value="@report.Dividend" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Выручка</div>
                    <InputNumber ParsingErrorMessage="Выручка должна быть числом" class="col-5 invest_Input" @bind-Value="@report.Revenue" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Валовая прибыль</div>
                    <InputNumber ParsingErrorMessage="Валовая прибыль должна быть числом" class="col-5 invest_Input" @bind-Value="@report.GrossProfit" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Чистая прибыль</div>
                    <InputNumber ParsingErrorMessage="Чистая прибыль должна быть числом" class="col-5 invest_Input" @bind-Value="@report.NetProfit" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Денежный поток</div>
                    <InputNumber ParsingErrorMessage="Денежный поток должен быть числом" class="col-5 invest_Input" @bind-Value="@report.CashFlow" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Активы</div>
                    <InputNumber ParsingErrorMessage="Активы должны быть числом" class="col-5 invest_Input" @bind-Value="@report.Assets" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Акционерный капитал</div>
                    <InputNumber ParsingErrorMessage="Капитал должен быть числом" class="col-5 invest_Input" @bind-Value="@report.ShareCapital" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Оборот</div>
                    <InputNumber ParsingErrorMessage="Оборот должен быть числом" class="col-5 invest_Input" @bind-Value="@report.Turnover" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Задолженность</div>
                    <InputNumber ParsingErrorMessage="Задолженность должна быть числом" class="col-5 invest_Input" @bind-Value="@report.LongTermDebt" />
                </div>
                <div class="row ">
                    <div class="col-6 invest_Label">Обязательства</div>
                    <InputNumber ParsingErrorMessage="Обязательства должны быть числом" class="col-5 invest_Input" @bind-Value="@report.Obligation" />
                </div>
                <div class="row justify-content-around my-3">
                    <div class="col-5">
                        <button class="btn btn-sm btn-danger rounded-pill w-100" @onclick="@(() => DeleteReport(report, result.CompanyName))">Удалить</button>
                    </div>
                    <div class="col-5">
                        <button type="submit" class="btn btn-sm btn-success rounded-pill w-100">Сохранить</button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
}

@code {
    List<NewCompanyReportModel> newReports = new List<NewCompanyReportModel>();

    protected override async Task OnInitializedAsync()
    {
        newReports = await httpClient.GetFromJsonAsync<List<NewCompanyReportModel>>("admin/getreports");
    }

    async Task DeleteReport(NewReportModel report, string companyName)
    {
        var response = await httpClient.PostAsJsonAsync<long>("admin/deletereport", report.ReportId);
        if (response.IsSuccessStatusCode)
            await DeleteReportNodeAsync(report, companyName);
    }
    async Task SaveReport(NewReportModel report, string companyName)
    {
        var response = await httpClient.PostAsJsonAsync<NewReportModel>("admin/savereport", report);
        if (response.IsSuccessStatusCode)
            await DeleteReportNodeAsync(report, companyName);
    }
    async Task DeleteReportNodeAsync(NewReportModel report, string companyName) =>
        await Task.Run(() => { newReports.FirstOrDefault(x => x.CompanyName.Equals(companyName)).Reports.Remove(report); });
}
