@page "/"
@inject CustomHttpClient http
@inject CustomNotification notice
@inject IJSRuntime jsRuntime

<div class="row align-items-center">
    <div class="col-6 pl-0 pr-1">
        <input @oninput="FindCompany" @onclick="GetAllCompanies" placeholder="Search companies" />
    </div>
    <div class="col-6 pr-0 pl-1">
        <select @onchange="GetOrderBy" id="filterIndex">
            <option selected value="@(UrlController.Companies)">Order by (default)</option>
            <option value="@(UrlController.BuyRecommendations)">recommendations for buy</option>
            <option value="@(UrlController.SellRecommendations)">recommendations for sale</option>
        </select>
    </div>
</div>

<div class="row isecodary iframe py-1">
    <div class="col-8"><span class="oi oi-dollar text-dark" aria-hidden="true"></span> today:</div>
    @if (cbrf != null)
    {
        <div class="col-4 text-right font-weight-bold text-dark">@cbrf.Valute.USD.Value.ToString("C")</div>
    }
    else
    {
        <span class="col-4 text-right font-weight-bold text-dark">@DefaultString.loading</span>
    }
</div>

<AdminFrame />
<AccountFrame />

@if (companies != null)
{
    for (int i = 0; i < companies.Items.Count; i++)
    {
        <div class="row">
            <div class="px-0 col-1 text-muted font-weight-bold align-self-center">@(i+1)</div>
            <div class="col-11">
                <CompanyFrame CompanyId="@companies.Items[i].Id" Name="@companies.Items[i].Name" />
            </div>
        </div>
    }
    if (_else)
    {
        <div class="row my-3">
            <span class="offset-4 col-4 text-center font-weight-bolder text-primary" style="cursor:pointer" @onclick="GetElse">else...</span>
        </div>
    }
}

@code
{
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    ClaimsPrincipal user;

    CBRF cbrf;
    bool _else;

    BaseViewPagination companies;
    List<BaseView> allCompanies;

    UrlController paginationController = UrlController.Companies;

    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationState).User;
        companies = await http.GetAsync<BaseViewPagination>(new UrlBuilder(paginationController, UrlOption.Pagination, 1).Result);
        cbrf = await http.GetAsync<CBRF>(new UrlBuilder(UrlService.Rate).Result);

        _else = companies.Pagination.HasNextPage;
    }
    async Task GetAllCompanies()
    {
        await SetDefaultFilterAsync();
        allCompanies = await http.GetAsync<List<BaseView>>(new UrlBuilder(UrlController.Companies).Result);
    }
    async Task GetOrderBy(ChangeEventArgs e)
    {
        paginationController = Enum.Parse<UrlController>(e.Value.ToString());

        if (paginationController == UrlController.SellRecommendations && !user.Identity.IsAuthenticated)
        {
            await SetDefaultFilterAsync();
            await notice.AlertAccessAsync();
            return;
        }

        companies = await http.GetAsync<BaseViewPagination>(new UrlBuilder(paginationController, UrlOption.Pagination, 1).Result);
        _else = companies.Pagination.HasNextPage;
    }
    async Task GetElse()
    {
        int paginationValue = companies.Pagination.PageNumber + 1;
        var next = await http.GetAsync<BaseViewPagination>(new UrlBuilder(paginationController, UrlOption.Pagination, paginationValue).Result);

        companies.Pagination = next.Pagination;
        _else = next.Pagination.HasNextPage;
        companies.Items.AddRange(next.Items);
    }
    void FindCompany(ChangeEventArgs e)
    {
        var result = allCompanies.Where(x => x.Name.Contains(e.Value.ToString(), StringComparison.OrdinalIgnoreCase)).ToList();
        companies.Items = result != null && result.Any() ? result : new List<BaseView>();
        _else = false;
    }
    async Task SetDefaultFilterAsync()
    {
        paginationController = UrlController.Companies;
        await jsRuntime.InvokeVoidAsync("setDefaultFilter", "filterIndex");
    }
}
