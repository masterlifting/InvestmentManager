@page "/"
@inject CustomHttpClient http

<div class="row">
    <div class="col-6 pl-0 pr-1">
        <input placeholder="Search companies" />
    </div>
    <div class="col-6 pr-0 pl-1">
        <select>
            <option selected @onclick="GetDefaultOrder">Order by</option>
            <option @onclick="GetBuyRecommendationsFilter">Recommendation for buy</option>
        </select>
    </div>
</div>


<div class="row isecodary iframe py-1">
    <div class="col-8"><span class="oi oi-dollar text-dark" aria-hidden="true"></span> today:</div>
    @if (dollar.HasValue)
    {
        <div class="col-4 text-right font-weight-bold text-dark">@dollar.Value.ToString("C")</div>
    }
    else
    {
        <text>@DefaultData.loading</text>
    }
</div>

<AdminFrame />
<AccountFrame />

@if (companies != null)
{
    @for (int i = 0; i < companies.Items.Count; i++)
    {
        <CompanyFrame Id="@companies.Items[i].Id" Name="@companies.Items[i].Name" />
    }
    @if (companies.Pagination.HasNextPage)
    {
        <div class="row mb-3">
            <div class="offset-4 col-4 text-center ilink text-dark" @onclick="GetNextCompanyCount">else...</div>
        </div>
    }
}

@code
{
    decimal? dollar;
    PaginationViewModelBase companies;
    string route = RouteName.company + "/list";

    protected override async Task OnInitializedAsync()
    {
        companies = await http.GetResultAsync<PaginationViewModelBase>(route, true);
        CBRF rate = await http.GetResultAsync<CBRF>(RouteName.additional + "/getrate");
        dollar = rate.Valute.USD.Value;
    }

    async Task GetDefaultOrder() =>
        companies = await http.GetResultAsync<PaginationViewModelBase>(RouteName.company + "/list", true);

    async Task GetBuyRecommendationsFilter()
    {
        route = RouteName.recommendation + "/orderbuy";
        companies = await http.GetResultAsync<PaginationViewModelBase>(route, true);
    }

    async Task GetNextCompanyCount()
    {
        var next = await http.GetResultAsync<PaginationViewModelBase>(route, companies.Pagination.PageNumber + 1, true);
        companies.Pagination = next.Pagination;
        companies.Items.AddRange(next.Items);
    }
}
