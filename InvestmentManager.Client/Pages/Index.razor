@page "/"
@inject API api
@inject CustomNotification notice
@inject IJSRuntime jsRuntime

<div class="row align-items-center">
    <div class="col-6 pl-0 pr-1">
        <input @oninput="FindCompany" @onclick="GetAllCompanies" placeholder="Search companies" />
    </div>
    <div class="col-6 pr-0 pl-1">
        <select @onchange="GetOrderBy" id="filterIndex">
            <option selected value="@CompanyAPI.controller">sort by (name)</option>
            <option value="@RatingAPI.controller">rating place</option>
            <option value="@SectorAPI.controller">sector name</option>
            <option value="@IndustryAPI.controller">industry name</option>
            <option value="@StockTransactionAPI.controller">stock transaction (desc)</option>
            <option value="@DividendAPI.controller">dividend pay (desc) </option>
            <option value="@BuyRecommendationAPI.controller">recommendations for buy</option>
            <option value="@SellRecommendationAPI.controller">recommendations for sale</option>
        </select>
    </div>
</div>

<div class="row isecodary iframe py-1">
    <div class="col-8"><span class="oi oi-dollar text-dark" aria-hidden="true"></span> today:</div>
    @if (cbrf != null)
    {
        <div class="col-4 text-right font-weight-bold text-dark">@cbrf.Valute.USD.Value.ToString("#.##")</div>
    }
    else
    {
        <span class="col-4 text-right font-weight-bold text-dark">@DefaultString.loading</span>
    }
</div>

<AdminFrame />
<AccountFrame />

@if (companies is not null)
{
    for (int i = 0; i < companies.Items.Count; i++)
    {
        <div class="row">
            <div class="px-0 col-1 text-muted font-weight-bold align-self-center">@(i+1)</div>
            <div class="col-11">
                <CompanyFrame CompanyId="@companies.Items[i].Id" Name="@companies.Items[i].Name" Description="@companies.Items[i].Description" />
            </div>
        </div>
    }
    if (_else)
    {
        <div class="row my-3">
            <span class="offset-4 col-4 text-center font-weight-bolder text-primary" style="cursor:pointer" @onclick="GetElse">else...</span>
        </div>
    }
}

@code
{
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    ClaimsPrincipal user;

    CBRF cbrf;
    bool _else;

    PaginationViewModel<ShortView> companies;
    List<ShortView> allCompanies;

    string paginationController = CompanyAPI.controller;

    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationState).User;
        companies = await api.GetByPaginationAsync(paginationController, 1);
        cbrf = await api.Service.Value.GetRateAsync();

        _else = companies.Pagination.HasNextPage;
    }
    async Task GetAllCompanies()
    {
        await SetDefaultFilterAsync();
        allCompanies = await api.Company.Value.GetShortCompaniesAsync();
    }
    async Task GetOrderBy(ChangeEventArgs e)
    {
        paginationController = e.Value.ToString();

        if (!user.Identity.IsAuthenticated 
            && (paginationController == SellRecommendationAPI.controller || paginationController == StockTransactionAPI.controller || paginationController == DividendAPI.controller))
        {
            await SetDefaultFilterAsync();
            await notice.AlertAccessAsync();
        }

        companies = await api.GetByPaginationAsync(paginationController, 1);
        _else = companies.Pagination.HasNextPage;
    }
    async Task GetElse()
    {
        int paginationValue = companies.Pagination.PageNumber + 1;
        var next = await api.GetByPaginationAsync(paginationController, paginationValue);

        companies.Pagination = next.Pagination;
        _else = next.Pagination.HasNextPage;
        companies.Items.AddRange(next.Items);
    }
    void FindCompany(ChangeEventArgs e)
    {
        var result = allCompanies.Where(x => x.Name.Contains(e.Value.ToString(), StringComparison.OrdinalIgnoreCase)).ToList();
        companies.Items = result != null && result.Any() ? result : new List<ShortView>();
        _else = false;
    }
    async Task SetDefaultFilterAsync()
    {
        await jsRuntime.InvokeVoidAsync("setDefaultFilter", "filterIndex");
        paginationController = CompanyAPI.controller;
        companies = await api.GetByPaginationAsync(paginationController, 1);
        _else = companies.Pagination.HasNextPage;
    }
}
