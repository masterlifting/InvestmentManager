// <auto-generated />
using System;
using InvestmentManager.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace InvestmentManager.Repository.Migrations
{
    [DbContext(typeof(InvestmentContext))]
    [Migration("20210126152256_RefactoringPriceService")]
    partial class RefactoringPriceService
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("InvestmentManager.Entities.Broker.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.AccountTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TransactionStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("AccountTransactions");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.Comission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<long>("ComissionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ComissionTypeId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Comissions");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.ComissionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("ComissionTypes");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.Dividend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IsinId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Tax")
                        .HasColumnType("Decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IsinId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Identifier")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Rate")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<long>("TransactionStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.StockTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint");

                    b.Property<long>("Identifier")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long>("TickerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("TickerId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.TransactionStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.AccountSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("FreeSum")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InvestedSum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("AccountSummaries");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.BuyRecommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("BuyRecommendations");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.Coefficient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DebtLoad")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("EPS")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("PB")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("PE")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("Profitability")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("ROA")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("ROE")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("Coefficients");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.ComissionSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ComissionSummaries");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.CompanySummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("ActualLot")
                        .HasColumnType("integer");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CurrentProfit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CompanySummaries");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.DividendSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("DividendSummaries");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.ExchangeRateSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AvgPurchasedRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AvgSoldRate")
                        .HasColumnType("numeric");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalPurchasedCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPurchasedQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalSoldCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalSoldQuantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ExchangeRateSummaries");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal?>("CashFlowPositiveBalanceValue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CoefficientAverageValue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CoefficientComparisonValue")
                        .HasColumnType("numeric");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PriceComparisonValue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ReportComparisonValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Result")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.SellRecommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LotMax")
                        .HasColumnType("integer");

                    b.Property<int>("LotMid")
                        .HasColumnType("integer");

                    b.Property<int>("LotMin")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceMax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceMid")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceMin")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("SellRecommendations");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("DateSplit")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IndustryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("SectorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("SectorId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Exchange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Industry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Isin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Isins");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Lot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("BidDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TickerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Value")
                        .HasColumnType("Decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TickerId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Assets")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("CashFlow")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Dividends")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LongTermDebt")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("Obligations")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("ShareCapital")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<long>("StockVolume")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Turnover")
                        .HasColumnType("Decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.ReportSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("ReportSources");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Sector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Ticker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("LotId");

                    b.ToTable("Tickers");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Weekend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExchangeWeekend")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.ToTable("Weekends");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.AccountTransaction", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Broker.TransactionStatus", "TransactionStatus")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.Comission", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("Comissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Broker.ComissionType", "ComissionType")
                        .WithMany("Comissions")
                        .HasForeignKey("ComissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("Comissions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ComissionType");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.Dividend", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("Dividends")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("Dividends")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Isin", "Isin")
                        .WithMany("Dividends")
                        .HasForeignKey("IsinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Isin");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.ExchangeRate", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Broker.TransactionStatus", "TransactionStatus")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.StockTransaction", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("StockTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("StockTransactions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Exchange", "Exchange")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Ticker", "Ticker")
                        .WithMany("StockTransactions")
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Broker.TransactionStatus", "TransactionStatus")
                        .WithMany("StockTransactions")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Exchange");

                    b.Navigation("Ticker");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.AccountSummary", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("AccountSummaries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("AccountSummaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.BuyRecommendation", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithOne("BuyRecommendation")
                        .HasForeignKey("InvestmentManager.Entities.Calculate.BuyRecommendation", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.Coefficient", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Report", "Report")
                        .WithOne("Coefficient")
                        .HasForeignKey("InvestmentManager.Entities.Calculate.Coefficient", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.ComissionSummary", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("ComissionSummaries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("ComissionSummaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.CompanySummary", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("CompanySummaries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithMany("CompanySummaries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("CompanySummaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Company");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.DividendSummary", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("DividendSummaries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithMany("DividendSummaries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("DividendSummaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Company");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.ExchangeRateSummary", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Broker.Account", "Account")
                        .WithMany("ExchangeRateSummaries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("ExchangeRateSummaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.Rating", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithOne("Rating")
                        .HasForeignKey("InvestmentManager.Entities.Calculate.Rating", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Calculate.SellRecommendation", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithOne("SellRecommendation")
                        .HasForeignKey("InvestmentManager.Entities.Calculate.SellRecommendation", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Company", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Industry", "Industry")
                        .WithMany("Companies")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Sector", "Sector")
                        .WithMany("Companies")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Isin", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithMany("Isins")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Price", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Currency", "Currency")
                        .WithMany("Prices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Ticker", "Ticker")
                        .WithMany("Prices")
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Report", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithMany("Reports")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.ReportSource", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithOne("ReportSource")
                        .HasForeignKey("InvestmentManager.Entities.Market.ReportSource", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Ticker", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Company", "Company")
                        .WithMany("Tickers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Exchange", "Exchange")
                        .WithMany("Tickers")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentManager.Entities.Market.Lot", "Lot")
                        .WithMany("Tickers")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Exchange");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Weekend", b =>
                {
                    b.HasOne("InvestmentManager.Entities.Market.Exchange", "Exchange")
                        .WithMany("Weekend")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.Account", b =>
                {
                    b.Navigation("AccountSummaries");

                    b.Navigation("AccountTransactions");

                    b.Navigation("Comissions");

                    b.Navigation("ComissionSummaries");

                    b.Navigation("CompanySummaries");

                    b.Navigation("Dividends");

                    b.Navigation("DividendSummaries");

                    b.Navigation("ExchangeRates");

                    b.Navigation("ExchangeRateSummaries");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.ComissionType", b =>
                {
                    b.Navigation("Comissions");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Broker.TransactionStatus", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("ExchangeRates");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Company", b =>
                {
                    b.Navigation("BuyRecommendation");

                    b.Navigation("CompanySummaries");

                    b.Navigation("DividendSummaries");

                    b.Navigation("Isins");

                    b.Navigation("Rating");

                    b.Navigation("Reports");

                    b.Navigation("ReportSource");

                    b.Navigation("SellRecommendation");

                    b.Navigation("Tickers");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Currency", b =>
                {
                    b.Navigation("AccountSummaries");

                    b.Navigation("AccountTransactions");

                    b.Navigation("Comissions");

                    b.Navigation("ComissionSummaries");

                    b.Navigation("CompanySummaries");

                    b.Navigation("Dividends");

                    b.Navigation("DividendSummaries");

                    b.Navigation("ExchangeRates");

                    b.Navigation("ExchangeRateSummaries");

                    b.Navigation("Prices");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Exchange", b =>
                {
                    b.Navigation("StockTransactions");

                    b.Navigation("Tickers");

                    b.Navigation("Weekend");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Industry", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Isin", b =>
                {
                    b.Navigation("Dividends");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Lot", b =>
                {
                    b.Navigation("Tickers");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Report", b =>
                {
                    b.Navigation("Coefficient");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Sector", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("InvestmentManager.Entities.Market.Ticker", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("StockTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
